package main

import (
	"bytes"
	"testing"
	"time"
)

var pingBody = []byte{0x00, 0x10, 0x00, 0x05, 0x00, 0x0c, 0x01, 0x16, 0x0d, 0x22, 0x2c, 0x45, 0x59, 0x47, 0x4d, 0x74, 0x45, 0x2a, 0x48, 0x44}
var dataBodyText = []byte{0x00, 0x0b, 0x00, 0x05, 0x00, 0xd9, 0x01, 0x04, 0x0d, 0x22, 0x2c, 0x45, 0x59, 0x47, 0x4d, 0x74, 0x45, 0x2a, 0x35, 0x38, 0x2e, 0x47, 0x70, 0x43, 0x56, 0x47, 0x50, 0x46, 0x67, 0x43, 0x66, 0x62, 0x57, 0x61, 0x76, 0x74, 0x47, 0x72, 0x43, 0x77, 0x60, 0x74, 0x74, 0xda, 0x44, 0x64, 0x7e, 0x61, 0xfa, 0x74, 0x47, 0xef, 0x59, 0x77, 0x61, 0x74, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x61, 0x74, 0xe2, 0xaa, 0x61, 0xe8, 0x7e, 0xe9, 0x74, 0xe8, 0x47, 0x72, 0xf9, 0x9a, 0x61, 0x74, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x47, 0x72, 0x16, 0x77, 0x61, 0x40, 0x0e, 0x47, 0xc5, 0xab, 0x4d, 0x60, 0xff, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x47, 0x72, 0x6f, 0x79, 0x8e, 0x74, 0x74, 0x47, 0x72, 0x6f, 0x5a, 0x61, 0x2d, 0x3a, 0x67, 0x72, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x47, 0xf2, 0x6f, 0x77, 0x59, 0x76, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x47, 0x72, 0x57, 0x75, 0x61, 0x74, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x61, 0x1c, 0x39}
var dataAckBody = []byte{0x00, 0x0b, 0x00, 0x05, 0x00, 0x03, 0x01, 0x04, 0x47, 0x60, 0x58}
var dongleVersionOld = []byte{0x0, 0x1, 0x0, 0x2}
var dongleVersionNew = []byte{0x0, 0x10, 0x0, 0x5}

//TODO rewrite
func TestUpload(t *testing.T) {
	//NOTE do not leave baseURL set to PVOutput or you will pollute your monitoring data.

	var fields growattRegisters
	fields.Ppv = 100   //10W
	fields.Tmp = 230   //23C
	fields.Vac1 = 2351 //235.1V

	tim := time.Now()

	err := upload(taggedRegister{tim,
		fields})
	if err != nil {
		t.Fatal(err)
	}
}
func TestData(t *testing.T) {
	r := bytes.NewReader(dataBodyText)
	msg := identifyMessage(r)

	if msg.Length != 217 || msg.Typ != data || msg.Version != 5 {
		t.Errorf("%+v\n", msg)
	}
	body := msg.readDataBody(r)
	decoded := xor(body.Tail[:], []byte("Growatt"))
	t.Log(string(decoded[:20]))

	t.Logf("% x\n%d\n", (decoded[31:]), len(decoded))

	r = bytes.NewReader(decoded)
	regs := read(r)
	t.Logf("%+v\n", regs)

}
func TestDataAck(t *testing.T) {
	r := bytes.NewReader(dataAckBody)
	msg := identifyMessage(r)

	if msg.Length != 11-8 || msg.Typ != data || msg.Version != 5 {
		t.Errorf("%+v\n", msg)
	}
	ack := msg.readDataAck(r)
	t.Log(ack)
}
func TestPing(t *testing.T) {
	r := bytes.NewReader(pingBody)
	msg := identifyMessage(r)

	if msg.Length != 20-8 || msg.Typ != ping || msg.Version != 5 {
		t.Errorf("%+v\n", msg)
	}
	ping := msg.readPing(r)

	if string(ping.Key[:]) != (*module + *inverter)[:10] {
		t.Error("Got:", ping.Key[:], "Expected:", (*module + *inverter)[:10])
	}
}

//TODO: We don't know what the final two bytes are yet in a PING
func TestPingXor(t *testing.T) {
	//var PingFooter = []byte{0X0d, 0X22, 0X2c, 0X45, 0X59, 0X47, 0X4d, 0X74, 0X45, 0X2a, 0X48, 0X44}
	var PingFooter = pingBody[8:18]
	xored := xor([]byte(*module), PingFooter)

	if string(xored) != "GrowattGro" {
		t.Fail()
	}
}
